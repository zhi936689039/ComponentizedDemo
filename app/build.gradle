apply plugin: 'com.android.application'
def build=dep.build;
android {
    compileSdkVersion build.compileSdkVersion
    buildToolsVersion build.buildToolsVersion

    defaultConfig {
        applicationId "com.glde.dlr"
        minSdkVersion build.minSdkVersion
        targetSdkVersion build.targetSdkVersion
        versionCode build.versionCode
        versionName build.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "0210052abdec782b6dd3b34c", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]

        ndk {
            // 设置支持的SO库架构
//            abiFilters 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
            abiFilters 'armeabi', 'armeabi-v7a' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }
    signingConfigs {
        debug {
            storeFile file("keystore/GTCS.keystore")
            storePassword "99990000"
            keyAlias "远程支援系统"
            keyPassword "99990000"
        }
        release {
            storeFile file("keystore/GTCS.keystore")
            storePassword "99990000"
            keyAlias "远程支援系统"
            keyPassword "99990000"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility build.VERSION_1_8
        targetCompatibility build.VERSION_1_8
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    // 自定义APK安装包名
    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                output ->
                    outputFileName = "GTCS_DLR_v${defaultConfig.versionName}_${releaseTime()}_${buildType.name}.apk"
            }
    }
}
static def releaseTime() {
    return new Date().format("yyyyMMdd-HHmmss")
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation dep.junit
    implementation dep.android_support.support
    implementation dep.android_support.appcompat
    implementation dep.android_support.constraint
    if(isRelease.toBoolean()){
        implementation project(path: ':module_login')
        implementation project(path: ':module_main')
    }
    //遍历获取配置gradle中要依赖的第三方基础library，新增library的话，
    // 则只要去配置gradle做下修改即可，each为遍历的意思,it为遍历中的item,
    // 避免是说如果又有新的library，且其他组件都要依赖，然后造成不好管理的问题
    dep.dependice.other.each{
        implementation project(it)
    }
}